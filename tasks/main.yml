---
# System prerequisites
- name: Check that there is a logged in user
  shell: "/bin/ls -l /dev/console | /usr/bin/awk '{ print $3 }'"
  register: homebrew_user_id_full

- name: Is a user logged in?
  fail:
    msg: There is no currently logged in user
  when: homebrew_user_id == ''

- name: Check that the Command Line Tools are present
  stat:
    path: /Library/Developer/CommandLineTools/usr/bin/git
  register: clt

- name: Are the Command Line Tools present?
  fail:
    msg: System is missing the Command Line Tools
  when: not clt.stat.exists

# Homebrew setup prerequisites.
- name: Ensure Homebrew parent directory has correct permissions (on High Sierra).
  file:
    path: "{{ homebrew_prefix }}"
    owner: root
    state: directory
  become: yes
  when: "ansible_distribution_version.startswith('10.13')"

- name: Ensure Homebrew parent directory has correct permissions (on non-'High Sierra' versions of Mac OS X).
  file:
    path: "{{ homebrew_prefix }}"
    owner: root
    group: admin
    state: directory
    mode: 0775
  become: yes
  when: "not ansible_distribution_version.startswith('10.13')"

- name: Ensure Homebrew directory exists.
  file:
    path: "{{ homebrew_install_path }}"
    owner: "{{ homebrew_user_id }}"
    group: admin
    state: directory
    mode: 0775
  become: yes

# Clone Homebrew.
- name: Ensure Homebrew is installed.
  git:
    repo: "{{ homebrew_repo }}"
    version: master
    dest: "{{ homebrew_install_path }}"
    update: no
    depth: 1
  become: yes
  become_user: "{{ homebrew_user_id }}"

# Adjust Homebrew permissions.
- name: Ensure proper permissions and ownership on homebrew_brew_bin_path dirs.
  file:
    path: "{{ homebrew_brew_bin_path }}"
    state: directory
    owner: "{{ homebrew_user_id }}"
    group: admin
    mode: 0775
  become: yes

- name: Ensure proper ownership on homebrew_install_path subdirs.
  file:
    path: "{{ homebrew_install_path }}"
    state: directory
    owner: "{{ homebrew_user_id }}"
    group: admin
  become: yes

# Place brew binary in proper location and complete setup.
- name: Check if homebrew binary is already in place.
  stat: "path={{ homebrew_brew_bin_path }}/brew"
  register: homebrew_binary

- name: Symlink brew to homebrew_brew_bin_path.
  file:
    src: "{{ homebrew_install_path }}/bin/brew"
    dest: "{{ homebrew_brew_bin_path }}/brew"
    state: link
  when: homebrew_binary.stat.exists == false
  become: yes

- name: Ensure proper homebrew folders are in place.
  file:
    path: "{{ homebrew_prefix }}/{{ item }}"
    state: directory
    owner: "{{ homebrew_user_id }}"
    group: admin
  become: yes
  with_items:
    - Cellar
    - Homebrew
    - Frameworks
    - Caskroom
    - bin
    - etc
    - include
    - lib
    - opt
    - sbin
    - share
    - share/zsh
    - share/zsh/site-functions
    - var

- name: Force update brew after installation.
  command: "{{ homebrew_brew_bin_path }}/brew update --force"
  when: homebrew_binary.stat.exists == false
  become: yes
  become_user: "{{ homebrew_user_id }}"  

# Tap.
- name: Ensure configured taps are tapped.
  homebrew_tap: "tap={{ item }} state=present"
  with_items: "{{ homebrew_taps }}"
  become: yes
  become_user: "{{ homebrew_user_id }}"  

# Cask.
- name: Install configured cask applications.
  homebrew_cask:
    name: "{{ item }}"
    state: present
    install_options: "appdir={{ homebrew_cask_appdir }}"
  with_items: "{{ homebrew_cask_apps }}"
  become: yes
  become_user: "{{ homebrew_user_id }}"  

- name: Ensure blacklisted cask applications are not installed.
  homebrew_cask: "name={{ item }} state=absent"
  with_items: "{{ homebrew_cask_uninstalled_apps }}"
  become: yes
  become_user: "{{ homebrew_user_id }}"

# Brew.
- name: Ensure configured homebrew packages are installed.
  homebrew:
    name: "{{ item.name | default(item) }}"
    install_options: "{{ item.install_options | default(omit) }}"
    state: present
  with_items: "{{ homebrew_installed_packages }}"
  become: yes
  become_user: "{{ homebrew_user_id }}"

- name: Ensure blacklisted homebrew packages are not installed.
  homebrew: "name={{ item }} state=absent"
  with_items: "{{ homebrew_uninstalled_packages }}"
  become: yes
  become_user: "{{ homebrew_user_id }}"

- name: Upgrade all homebrew packages (if configured).
  homebrew: update_homebrew=yes upgrade_all=yes
  when: homebrew_upgrade_all_packages
  become: yes
  become_user: "{{ homebrew_user_id }}"

- name: Check for Brewfile.
  stat:
    path: "{{ homebrew_brewfile_dir }}/Brewfile"
  register: homebrew_brewfile

- name: Install from Brewfile.
  command: "brew bundle chdir={{ homebrew_brewfile_dir }}"
  when: homebrew_brewfile.stat.exists and homebrew_use_brewfile
  become: yes
  become_user: "{{ homebrew_user_id }}"
